name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.9.0"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  sonarcloud:
    name: SonarCloud
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.9.0"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Generate a token on SonarCloud.io, add it to your repository as a secret

  version:
    name: Version
    needs: [test, sonarcloud]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.8.1"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Determine version
        id: version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release to update version
          npx semantic-release
          # Get the new version
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: [test, sonarcloud, version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.8.1"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Pull latest changes
        run: git pull origin main

      - name: Build Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build
          path: dist/
          
  release:
    name: Release
    needs: [test, sonarcloud, version, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.8.1"
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Pull latest changes
        run: git pull origin main

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: electron-build
          path: dist/

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release notes from git log if CHANGELOG.md doesn't exist
          if [ ! -f CHANGELOG.md ]; then
            echo "## What's Changed" > CHANGELOG.md
            git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" >> CHANGELOG.md
          fi
          
          # Create a temporary directory for assets
          mkdir -p release-assets
          
          # Move AppImage to release assets
          if ls dist/*.AppImage 1> /dev/null 2>&1; then
            cp dist/*.AppImage release-assets/
          fi
          
          # Move deb package to release assets
          if ls dist/*.deb 1> /dev/null 2>&1; then
            cp dist/*.deb release-assets/
          fi
          
          # Upload assets to release
          if [ -d "release-assets" ] && [ "$(ls -A release-assets)" ]; then
            gh release upload "v${{ needs.version.outputs.version }}" release-assets/* --clobber
          fi 